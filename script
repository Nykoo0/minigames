<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Mini Games Hub</title>
<style>
  body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: #222;
    color: #eee;
    margin: 0; padding: 0;
    display: flex; flex-direction: column; align-items: center;
    min-height: 100vh;
  }
  header {
    background: #444;
    width: 100%;
    padding: 1rem 0;
    text-align: center;
    font-size: 1.5rem;
    font-weight: bold;
    letter-spacing: 2px;
  }
  nav {
    margin: 1rem 0;
  }
  nav button {
    background: #666;
    color: #eee;
    border: none;
    padding: 0.5rem 1rem;
    margin: 0 0.3rem;
    cursor: pointer;
    font-weight: 600;
    border-radius: 4px;
    transition: background-color 0.3s;
  }
  nav button:hover, nav button.active {
    background: #09f;
  }
  main {
    background: #333;
    padding: 2rem;
    border-radius: 8px;
    min-width: 320px;
    max-width: 400px;
    box-shadow: 0 0 10px #09f;
  }
  .hidden {
    display: none;
  }
  /* TicTacToe styles */
  #tictactoe-board {
    display: grid;
    grid-template-columns: repeat(3, 80px);
    grid-template-rows: repeat(3, 80px);
    gap: 5px;
    justify-content: center;
    margin-top: 1rem;
  }
  #tictactoe-board button {
    font-size: 2rem;
    font-weight: bold;
    cursor: pointer;
    background: #222;
    border: 2px solid #09f;
    color: #09f;
    border-radius: 6px;
  }
  #tictactoe-status {
    margin-top: 1rem;
    font-weight: bold;
    text-align: center;
  }
  /* Counting styles */
  #counting-display {
    font-size: 3rem;
    text-align: center;
    margin-bottom: 1rem;
  }
  #counting-btn {
    background: #09f;
    color: #222;
    border: none;
    padding: 1rem 2rem;
    font-size: 1.5rem;
    cursor: pointer;
    border-radius: 6px;
  }
  /* Quiz styles */
  #quiz-question {
    font-weight: bold;
    margin-bottom: 1rem;
  }
  #quiz-options button {
    display: block;
    width: 100%;
    margin: 0.4rem 0;
    padding: 0.6rem;
    font-size: 1rem;
    cursor: pointer;
    background: #444;
    border: none;
    color: #eee;
    border-radius: 4px;
    text-align: left;
  }
  #quiz-result {
    margin-top: 1rem;
    font-weight: bold;
    text-align: center;
  }
</style>
</head>
<body>

<header>Mini Games Hub</header>

<nav>
  <button id="btn-howgay" class="active">HowGay</button>
  <button id="btn-tictactoe">TicTacToe</button>
  <button id="btn-counting">Counting</button>
  <button id="btn-howstupid">HowStupid</button>
</nav>

<main>
  <!-- HowGay Game -->
  <section id="game-howgay">
    <h2>HowGay</h2>
    <p>Click the button to see how gay you are!</p>
    <button id="howgay-btn">Check!</button>
    <p id="howgay-result" style="font-size:2rem; margin-top:1rem;"></p>
  </section>

  <!-- TicTacToe Game -->
  <section id="game-tictactoe" class="hidden">
    <h2>Tic Tac Toe</h2>
    <div id="tictactoe-board">
      <!-- 9 buttons generated by JS -->
    </div>
    <div id="tictactoe-status"></div>
    <button id="tictactoe-reset" style="margin-top:1rem; padding:0.5rem 1rem; cursor:pointer;">Reset</button>
  </section>

  <!-- Counting Game -->
  <section id="game-counting" class="hidden">
    <h2>Counting</h2>
    <div id="counting-display">0</div>
    <button id="counting-btn">Add 1</button>
  </section>

  <!-- HowStupid Game -->
  <section id="game-howstupid" class="hidden">
    <h2>How Stupid</h2>
    <div id="quiz-question"></div>
    <div id="quiz-options"></div>
    <div id="quiz-result"></div>
  </section>
</main>

<script>
  // Navigation buttons and game sections
  const navButtons = {
    howgay: document.getElementById('btn-howgay'),
    tictactoe: document.getElementById('btn-tictactoe'),
    counting: document.getElementById('btn-counting'),
    howstupid: document.getElementById('btn-howstupid')
  };

  const gameSections = {
    howgay: document.getElementById('game-howgay'),
    tictactoe: document.getElementById('game-tictactoe'),
    counting: document.getElementById('game-counting'),
    howstupid: document.getElementById('game-howstupid')
  };

  function showGame(gameName) {
    for (const key in gameSections) {
      if (key === gameName) {
        gameSections[key].classList.remove('hidden');
        navButtons[key].classList.add('active');
      } else {
        gameSections[key].classList.add('hidden');
        navButtons[key].classList.remove('active');
      }
    }
  }

  // Nav button event listeners
  navButtons.howgay.addEventListener('click', () => showGame('howgay'));
  navButtons.tictactoe.addEventListener('click', () => showGame('tictactoe'));
  navButtons.counting.addEventListener('click', () => showGame('counting'));
  navButtons.howstupid.addEventListener('click', () => showGame('howstupid'));

  // ========== HowGay Game ==========
  const howgayBtn = document.getElementById('howgay-btn');
  const howgayResult = document.getElementById('howgay-result');

  howgayBtn.addEventListener('click', () => {
    const percent = Math.floor(Math.random() * 101);
    howgayResult.textContent = `You are ${percent}% gay 🌈`;
  });

  // ========== TicTacToe Game ==========
  const tttBoard = document.getElementById('tictactoe-board');
  const tttStatus = document.getElementById('tictactoe-status');
  const tttReset = document.getElementById('tictactoe-reset');
  let tttTurn = 'X';
  let tttCells = Array(9).fill(null);
  let tttGameOver = false;

  function checkWinner() {
    const wins = [
      [0,1,2], [3,4,5], [6,7,8], // rows
      [0,3,6], [1,4,7], [2,5,8], // cols
      [0,4,8], [2,4,6]           // diagonals
    ];

    for (const [a,b,c] of wins) {
      if (tttCells[a] && tttCells[a] === tttCells[b] && tttCells[b] === tttCells[c]) {
        return tttCells[a];
      }
    }
    return null;
  }

  function renderBoard() {
    tttBoard.innerHTML = '';
    tttCells.forEach((cell, i) => {
      const btn = document.createElement('button');
      btn.textContent = cell || '';
      btn.disabled = tttGameOver || cell !== null;
      btn.addEventListener('click', () => {
        if (!tttGameOver && !tttCells[i]) {
          tttCells[i] = tttTurn;
          tttTurn = tttTurn === 'X' ? 'O' : 'X';
          updateGame();
        }
      });
      tttBoard.appendChild(btn);
    });
  }

  function updateGame() {
    renderBoard();
    const winner = checkWinner();
    if (winner) {
      tttStatus.textContent = `Player ${winner} wins! 🎉`;
      tttGameOver = true;
    } else if (tttCells.every(cell => cell !== null)) {
      tttStatus.textContent = `It's a draw! 🤝`;
      tttGameOver = true;
    } else {
      tttStatus.textContent = `Player ${tttTurn}'s turn`;
    }
  }

  tttReset.addEventListener('click', () => {
    tttCells.fill(null);
    tttTurn = 'X';
    tttGameOver = false;
    updateGame();
  });

  updateGame();

  // ========== Counting Game ==========
  const countingDisplay = document.getElementById('counting-display');
  const countingBtn = document.getElementById('counting-btn');
  let count = 0;
  countingBtn.addEventListener('click', () => {
    count++;
    countingDisplay.textContent = count;
  });

  // ========== HowStupid Game ==========
  const quizQuestion = document.getElementById('quiz-question');
  const quizOptions = document.getElementById('quiz-options');
  const quizResult = document.getElementById('quiz-result');

  const stupidQuiz = [
    {
      question: "What's 2 + 2?",
      options: ["3", "4", "5", "22"],
      answer: 1
    },
    {
      question: "What color is the sky on a clear day?",
      options: ["Blue", "Green", "Red", "Purple"],
      answer: 0
    },
    {
      question: "If you have 5 apples and give away 3, how many do you have?",
      options: ["2", "3", "5", "8"],
      answer: 0
    },
  ];

  let currentQuizIndex = 0;

  function loadQuiz() {
    quizResult.textContent = '';
    const q = stupidQuiz[currentQuizIndex];
    quizQuestion.textContent = q.question;
    quizOptions.innerHTML = '';
    q.options.forEach((opt, i) => {
      const btn = document.createElement('button');
      btn.textContent = opt;
      btn.onclick = () => handleAnswer(i);
      quizOptions.appendChild(btn);
    });
  }

  function handleAnswer(selectedIndex) {
    const q = stupidQuiz[currentQuizIndex];
    if (selectedIndex === q.answer) {
      quizResult.textContent = "Correct! You are not stupid 😎";
    } else {
      // Random stupidity percent for fun
      const stupidPercent = Math.floor(Math.random() * 101);
      quizResult.textContent = `Wrong! You are ${stupidPercent}% stupid 🤪`;
    }
    // Move to next question after short delay
    setTimeout(() => {
      currentQuizIndex++;
      if (currentQuizIndex >= stupidQuiz.length) {
        quizResult.textContent += " Quiz finished!";
        currentQuizIndex = 0; // restart quiz after finishing
      }
      loadQuiz();
    }, 2000);
  }

  loadQuiz();
</script>

</body>
</html>
